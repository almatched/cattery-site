---
import { storyblokEditable, useStoryblokApi } from "@storyblok/astro";
import { getFullUrl, getTransLink } from "../utils/langs.ts";
import isPreview from "@/utils/isPreview.ts";
import { Image } from "astro:assets";
import type {
  AllProfilesStoryblok,
  PageStoryblok,
  ProfileStoryblok,
} from "component-types-sb";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { AlertCircle, Cat, ChevronRight, ImageIcon } from "lucide-react";
import { buttonVariants } from "@/components/ui/button";

interface Props {
  language: string;
  blok: AllProfilesStoryblok;
}

const { language, blok } = Astro.props;

console.log(blok);

const storyblokApi = useStoryblokApi();

const { data: profilesPageData } = await storyblokApi.get(
  "cdn/stories/profiles/parents",
  {
    version: isPreview() ? "draft" : "published",
    language,
  }
);

const { data: itemsData } = await storyblokApi.get(`cdn/stories`, {
  version: isPreview() ? "draft" : "published",
  starts_with: "profiles/parents",
  is_startpage: false,
  language,
});

const profilesPage: PageStoryblok = profilesPageData.story.content;

const articles = itemsData.stories;
const maxWidth = "500";
---

<Fragment {...storyblokEditable(blok)}>
  {
    articles?.length === 0 ? (
      <Fragment>
        <Cat className="w-24 h-24 text-primary mb-6 mx-auto" />
        <h1 class="text-4xl font-bold text-center text-primary mb-12">
          {profilesPage.title}
        </h1>
        <Card className="border-accent mx-auto max-w-xl text-center">
          <CardHeader>
            <AlertCircle className="w-12 h-12 mx-auto mb-4" />
            <CardTitle>{profilesPage.content_absent_title}</CardTitle>
          </CardHeader>
          <CardContent>
            <p class="mb-6">{profilesPage.content_absent}</p>
            <div class="flex flex-col sm:flex-row justify-center gap-4">
              <a
                href={getFullUrl(
                  language,
                  profilesPage.links[0].link.cached_url
                )}
                class={buttonVariants({
                  variant: "default",
                })}
              >
                {profilesPage.links[0].link_name}
              </a>
              <a
                class={buttonVariants({
                  variant: "outline",
                })}
                href={getFullUrl(
                  language,
                  profilesPage.links[1].link.cached_url
                )}
              >
                <ImageIcon className="w-6 h-6 mr-2" />
                {profilesPage.links[1].link_name}
              </a>
            </div>
          </CardContent>
        </Card>
      </Fragment>
    ) : (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        {articles?.reverse().map((article) => {
          const profile: ProfileStoryblok = article.content;
          profile.slug = article.slug;
          return (
            <Card className="shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden flex flex-col">
              <div class="aspect-square overflow-hidden">
                <Image
                  src={profile.image?.filename + `/m/${maxWidth}x${0}`}
                  alt={profile.image?.alt ?? "image without description"}
                  inferSize
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-110"
                  quality={80}
                />
              </div>
              <CardHeader>
                <CardTitle className="text-2xl font-bold text-primary">
                  {profile.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p class="mb-4">
                  {!!profile.gender?.trim().length && (
                    <>
                      <span class="font-bold">{profile.gender_title}:</span>{" "}
                      {profile.gender} <br />
                    </>
                  )}
                  {!!profile.birthdate?.trim().length && (
                    <>
                      <span class="font-bold">{profile.birthdate_title}:</span>{" "}
                      {profile.birthdate.slice(0, 10)} <br />
                    </>
                  )}
                </p>
              </CardContent>
              <CardFooter className="mt-auto">
                <a
                  href={getTransLink(
                    language,
                    `/profiles/parents/${profile.slug}`
                  )}
                  class={buttonVariants({
                    variant: "outline",
                    className: "w-full",
                  })}
                >
                  <p>{profilesPage.button_text}</p>
                  <ChevronRight className="ml-2 h-6 w-6" />
                </a>
              </CardFooter>
            </Card>
          );
        })}
      </div>
    )
  }
</Fragment>
