---
import { storyblokEditable, useStoryblokApi } from "@storyblok/astro";
import { getTransLink } from "../utils/langs.ts";
import isPreview from "@/utils/isPreview.ts";
import { Image } from "astro:assets";
import type {
  AllProfilesStoryblok,
  PageStoryblok,
  ProfileStoryblok,
} from "component-types-sb";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ChevronRight } from "lucide-react";
import { buttonVariants } from "@/components/ui/button";

interface Props {
  language: string;
  blok: AllProfilesStoryblok;
}

const { language, blok } = Astro.props;

console.log(blok);

const storyblokApi = useStoryblokApi();

const { data: profilesPageData } = await storyblokApi.get(
  "cdn/stories/profiles/parents",
  {
    version: isPreview() ? "draft" : "published",
    language,
  }
);

const { data: itemsData } = await storyblokApi.get(`cdn/stories`, {
  version: isPreview() ? "draft" : "published",
  starts_with: "profiles/parents",
  is_startpage: false,
  language,
});

const profilesPage: PageStoryblok = profilesPageData.story.content;

const title = profilesPage.title;
const noContentFallback = profilesPage.content_absent;
const articles = itemsData.stories;
const maxWidth = "500";
---

<Fragment {...storyblokEditable(blok)}>
  {
    !!title.trim().length && (
      <h1 class="text-4xl font-bold text-center text-primary mb-12">{title}</h1>
    )
  }
  {
    articles?.length === 0 ? (
      <p class="text-2xl">{noContentFallback}</p>
    ) : (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        {articles?.reverse().map((article) => {
          const profile: ProfileStoryblok = article.content;
          profile.slug = article.slug;
          return (
            <Card className="shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden">
              <div class="aspect-square overflow-hidden">
                <Image
                  src={profile.image?.filename + `/m/${maxWidth}x${0}`}
                  alt={profile.image?.alt ?? "image without description"}
                  inferSize
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-110"
                  quality={80}
                />
              </div>
              <CardHeader>
                <CardTitle className="text-2xl font-bold text-primary">
                  {profile.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p class="mb-4">
                  {!!profile.gender?.trim().length && (
                    <>
                      <span class="font-bold">{profile.gender_title}:</span>
                      {profile.gender} <br />
                    </>
                  )}
                  {!!profile.birthdate?.trim().length && (
                    <>
                      <span class="font-bold">{profile.birthdate_title}:</span>
                      {profile.birthdate.slice(0, 10)} <br />
                    </>
                  )}
                </p>
                <a
                  href={getTransLink(
                    language,
                    `/profiles/parents/${profile.slug}`
                  )}
                  class={buttonVariants({
                    variant: "outline",
                    className:
                      "w-full border-primary text-primary hover:bg-primary hover:text-foreground text-lg md:text-xl",
                  })}
                >
                  Profil ansehen <ChevronRight className="ml-2 h-4 w-4" />
                </a>
              </CardContent>
            </Card>
          );
        })}
      </div>
    )
  }
</Fragment>
